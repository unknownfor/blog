{"meta":{"title":"Cholesterol","subtitle":"你的经历终成谈吐","description":"你的经历终成谈吐","author":"胆固醇","url":"http://unknownfor.github.io","root":"/"},"pages":[{"title":"欢迎来到这里。","date":"2016-03-23T06:24:06.000Z","updated":"2019-12-11T08:28:34.493Z","comments":true,"path":"about/index.html","permalink":"http://unknownfor.github.io/about/index.html","excerpt":"","text":"# 关于博客博客建立于 1520525077(UNIX)，由 Hexo 强力驱动。 # 关于我重度可乐爱好者，所以自命名cholesterol。 加班🐶一只，软件工程专业，喜欢侦探小说和数学。 有两只猫 (´ཀ`」 ∠) 目前的职位是「前端 开发工程师」。 # 联系我如果你希望同我交流，可以发送邮件 （cholesterol54@gmail.com）给我。 偶尔会在 github 上冒泡，fork最近的新的前端代码。"},{"title":"categories","date":"2016-03-23T06:24:06.000Z","updated":"2019-05-23T06:28:42.000Z","comments":true,"path":"categories/index.html","permalink":"http://unknownfor.github.io/categories/index.html","excerpt":"","text":""},{"title":"archive","date":"2016-03-23T06:24:06.000Z","updated":"2019-05-23T07:23:38.000Z","comments":true,"path":"archives/index.html","permalink":"http://unknownfor.github.io/archives/index.html","excerpt":"","text":""}],"posts":[{"title":"手动实现all、bind、apply","slug":"手动实现all、bind、apply","date":"2017-09-23T10:32:59.000Z","updated":"2019-12-11T08:05:32.292Z","comments":true,"path":"2017/09/23/手动实现all、bind、apply/","link":"","permalink":"http://unknownfor.github.io/2017/09/23/手动实现all、bind、apply/","excerpt":"","text":"call原生call 123456789function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;run.call(&#123; a: 'a', b: 'b'&#125;, 1, 2) 在实现的过程有个关键： 如果一个函数作为一个对象的属性，那么通过对象的.运算符调用此函数，this 就是此对象 1234567891011let obj = &#123; a: 'a', b: 'b', test: function (arg1, arg2) &#123; console.log(arg1, arg2) // this.a 就是 a; this.b 就是 b console.log(this.a, this.b) &#125;&#125;obj.test(1, 2) 手动模拟call123456789101112131415161718192021222324252627282930Function.prototype.call2 = function(context) &#123; if(typeof this !== 'function') &#123; throw new TypeError('Error') &#125; // 默认上下文是window context = context || window // 保存默认的fn const &#123; fn &#125; = context // 前面讲的关键，将函数本身作为对象context的属性调用，自动绑定this context.fn = this const args = [...arguments].slice(1) const result = context.fn(...args) // 恢复默认的fn context.fn = fn return result&#125;// 以下是测试代码function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;test.call2(&#123; a: 'a', b: 'b'&#125;, 1, 2) bindbind有两个特点： 本身返回一个全新的函数，所以需要考虑new的清空 可以保留参数，内部实现了参数的拼接 123456789101112131415161718192021222324252627282930313233343536Function.prototype.bind2 = function(context) &#123; if(typeof this !== 'function') &#123; throw new TypeError('Error') &#125; const that = this // 保留之前的参数，为了下面的参数拼接 const args = [...arguments].slice(1) return function F() &#123; // 如果被new创建实例，不会被改变上下文！ if(this instanceof F) &#123; return new that(...args, ...arguments) &#125; // args.concat(...arguments): 拼接之前和现在的参数 // 注意：arguments是个类Array的Object, 用解构运算符..., 直接拿值拼接 return that.apply(context, args.concat(...arguments)) &#125;&#125;/** * 以下是测试代码 */function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;const test2 = test.bind2(&#123; a: 'a', b: 'b'&#125;, 1) // 参数 1test2(2) // 参数 2 applyapply和call实现类似，只是传入的参数形式是数组形式，而不是逗号分隔的参数序列。 因此，借助es6提供的…运算符，就可以很方便的实现数组和参数序列的转化。 12345678910111213141516171819202122232425262728293031323334Function.prototype.apply2 = function(context) &#123; if(typeof this !== 'function') &#123; throw new TypeError('Error') &#125; context = context || window const &#123; fn &#125; = context context.fn = this let result if(Array.isArray(arguments[1])) &#123; // 通过...运算符将数组转换为用逗号分隔的参数序列 result = context.fn(...arguments[1]) &#125; else &#123; result = context.fn() &#125; context.fn = fn return result&#125;/** * 以下是测试代码 */function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;test.apply2(&#123; a: 'a', b: 'b'&#125;, [1, 2])","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://unknownfor.github.io/tags/前端/"}]},{"title":"记录hexo替换主题","slug":"记录hexo替换主题","date":"2017-09-09T07:57:42.000Z","updated":"2019-12-11T08:04:52.475Z","comments":true,"path":"2017/09/09/记录hexo替换主题/","link":"","permalink":"http://unknownfor.github.io/2017/09/09/记录hexo替换主题/","excerpt":"","text":"9月10日更新博客也是上线了一年了，结果拖拖拉拉一直没什么东西写，今天闲来无事想着更换看腻了的博客主题。在 hexo主题官网 找到了一款极简的主题 polarbear ,安装替换现有主题都是常规流程。参考制作人的readme步骤。 12$ npm install hexo-renderer-scss --save$ git clone https://github.com/frostfan/hexo-theme-polarbear themes/polarbear 修改配置 _config.yml 123456789101112# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: polarbear# 在归档页面显示所有文章 （Show all articles on archive page.）# 需要安装(Need to install) hexo-generator-archive 插件支持archive_generator: per_page: 0 yearly: false monthly: false daily: false 结果 archive 和 about 遇到了问题。右上角的归档页和关于我找不到路径。 解决about找不到排查了一下问题，可能是文件找不到。终于找到了相关教程，new了文件 12hexo new page \"about\"hexo new page \"archives\" 执行命令后在本地站点的source目录下生成一个about文件夹，修改about文件夹下的index.md。相应的archives也要修改type 12345---title: aboutdate: 2016-03-23 14:24:06type: about--- 12345---title: archivesdate: 2016-03-23 14:24:06type: archive--- 重启服务就发现about可以正常跳转一个空页了。 解决archive找不到百思不得其解为什么hexo没有自动生成archive，明明是安装了插件就可以支持的。重新执行了一下安装命令。1npm install --save hexo-generator-archive 在node_modules下找到了相应的hexo-generator-archive，证明插件安装成功。但是还是没有自动生成。 终于排查到了问题，_config.yml 网站配置文件里的文件目录写错了 1234# 错误archive_dir: archive# 正确archive_dir: archives 终于成功了！ 以下是9月10日更新： 侧边栏没有展示自定义的widget修改本地站点的 _config.yml 的相关配置语句并没有生效，经过排查发现是主题的 _config.yml 的相关配置是false，看来主题的配置权重更高。修改为false之后就发现了自定义的 widget_custom 出现了。 参考文章 官方说明 Hexo安装配置详解","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://unknownfor.github.io/tags/hexo/"}]},{"title":"emoji的坑","slug":"emoji的坑","date":"2017-08-22T10:10:23.000Z","updated":"2019-12-11T08:14:08.950Z","comments":true,"path":"2017/08/22/emoji的坑/","link":"","permalink":"http://unknownfor.github.io/2017/08/22/emoji的坑/","excerpt":"","text":"1从毕业以来，基本就一直在做移动端，但是一直就关于移动端的开发，各种适配问题的解决，在日常搬砖中处理了就过了，也没有把东西都沉淀下来，现就一个小bug，记录一下。 背景之前在做一个留言功能时，发现在其中一台安卓5.0的手机上，输入emoji糊掉了，成了如下这样的情况 这是skr啥玩意儿呀。 与是我又试了好几个手机，ios都没有问题，甚至一台安卓机中之霸（安卓4.0），随便进个页面都要加载十几秒的手机都没有问题，是乱码了吗？ 为啥emoji会出现乱码呢？相信很多人都遇到过关于emoji的问题，比如输入emoji，传给后端，再经过一系列操作后从接口中取到后端返回的emoji字符就乱了。又比如为了限制输入字数，给字符做截断时出现的问题。 初步怀疑是编码问题，那我们就来看看emoji究竟是何方神圣。 emoji的历史emoji对于我们来说并不陌生，我们很早就开始接触它了。emoji这个词来源于日语里的“絵文字”（假名为“えもじ”，读音即emoji）。它是1999年，当时还在日本无线运营商NTT DoCoMo工作的Shigetaka Kurita（栗田穣崇）发明的。 emoji的编码emoji虽然看上去是一个有颜色有形状的表情，但它属于计算机中的字符。在计算机中，我们把文字、标点符号、图形符号、数字等统一称为字符，由字符组成的集合，我们称为字符集。为了让计算机识别字符集里的字符，我们设计了一套字符集编码规则，比如ASCII码，由于ASCII只规定了128个字符的编码，随着计算机的发展，人们意识到这些编码显然是不够的，为了统一世界上的所有字符，诞生出了Unicode字符集，而emoji字符就是Unicode字符集中的一部分。 UnicodeUnicode从0开始，为每个符号指定一个编号，称做”码点”，如U+0000，U+表示紧跟在后面的十六进制数是Unicode的码点。Unicode只规定了每个字符的码点，到底用什么样的字节序表示这个码点，就涉及到编码方法，比如我们html上常用的UTF-8。关于不同的编码方法怎么表示Unicode，以及JavaScript是怎么处理Unicode，这里就不详细阐述了，可参考Unicode与JavaScript详解 链接地址：http://www.ruanyifeng.com/blog/2014/12/unicode.html 所以emoji作为unicode，那在计算机上是怎么显示的？ 之前我在一微信群里@我一朋友，结果出现了下面的情况。 @符号跑右边去了，当时觉得很奇怪，后来了解到，这是阿拉伯文，因为阿拉伯文的书写规则是从右向左，所以@符号跑到右边去了，可见微信对不同unicode字符排版做的兼容还挺好。再比如这几个字符，热҈得҈字҈出҈汗҈了҈。 这就涉及到了复杂文字编排（Complex text layout，缩写：CTL）。要求复杂文字编排以适当显示的书写系统称为复杂文本，比如阿拉伯文字、婆罗米系文字的天城文、泰文等。 拿泰文来说，根据拼写规则，泰文可形象地分为鞋子字符、主体字符、帽子字符、声调字符等。泰文的每个基本字符对应一个unicode码，人们在输入多个基本字符时，新输入的字符与之前的字符做匹配，如果可以组合，则这时前面的输入就拼合成了一个泰文字符然后显示出来。 萨瓦迪卡～ 英文也是，我们在输入英文时会习惯以空格来拆分前后单词,你如果输入一串连续的英文字母，计算机在识别上也会有困难。phpisthebestlanguageintheworld（手动滑稽脸）这句话就很有争议！！ 人为可以轻松识别一个泰文是否拼写正确，但是计算机在显示时就很难判断。 像泰文这种特殊合成字符的本质，你无法避免人们在计算机上都会有哪些奇妙的创造。 于是乎，不同字符之间的组合，就诞生出了流行的颜文字： ฅ՞•ﻌ•՞ฅ ʕ•̼͛͡•ʕ-̺͛͡•ʔ•̮͛͡•ʔ (⑉꒦ິ^꒦ິ⑉) ₊˚‧(๑σ̴̶̷̥́ ₃σ̴̶̷̀)·˚₊ ୧(๑•̀⌄•́๑)૭✧ 而字符的显示，还有一个影响就是字体，在浏览器中，如果对应的编码在字体文件中为空，一般会展示成□□□□，这样至少不会影响排版，但是unicode作为万国码实在太庞大了，在一些字体里，对一些特殊字符还是会产生一些错误的排版，唉҈～真҈是惆҈怅～～ 对于emoji来说，它虽然也是一种特殊字符，但它并不属于复杂文本，并且我是通过移动终端规范输入，排版也不会有什么问题。我设置的font-family在其他手机上是好的也说明，这些字体对输入的emoji也是支持的，出问题的终端上，非emoji的字体正常显示，那暂时可以排除字体对emoji的影响了。 回归问题到这里，还没有解决我的问题。本来以为是常见问题，比如数据提交时或者数据库储存的编码问题。可是，我也没传给后端啊！我刚在自己的页面上输入显示就成这样了！ 可恶，这个锅甩不动了。还是得自己解决，我input框刚输入，本地看到就乱了，看来还是自己的问题。 我一气之下疯狂乱点，发现不同的表情对应的这些小虫长得还不一样，于是，我决定把它放大看一看 这不就是表情么，只是因为某些原因看上去被压缩了。我的表情啊，你到底是经历了什么才变得如此面目全非。我一定要找到毁你容的真凶。 先分析一下表象，emoji的显示被截断、压缩。为什么被压缩？回归场景，移动端切图，那么移动端的多终端适配，可不可能是问题的原因？ 切图是UI给的以iphone6的屏幕宽度为准的750px2倍视觉稿，组内方案选择参考了手淘的flexible。具体原理和这次主题无关，我就不在这里阐述了。关于移动端多端适配方案的原理详细，可以参考 手淘H5页面的终端适配 链接地址: https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html 那么哪些代码是影响emoji缩放的代码呢？最先想到的是，我的emoji在输入框里面，设置了font-size，这个font-size的值是rem, 那会不会是某些安卓系统emoji对rem支持不好？于是我换成px，依然如此。 那么页面上还有哪儿还有会影响缩放呢？于是定位到了这里。 1&lt;meta name = \"viewport\" content=\"initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=0,width=device-width\"/&gt; viewport是我们设备屏幕上用来显示网页的区域，在移动端上，viewport一般都是大于浏览器可视区域。 理论上，移动端有三个viewport。 layout viewport：移动浏览器为了让所有网站正常显示（包括那些PC的页面），把默认的viewport设为了一个较宽值，这个值一般都是大于移动端可视区（比如iPhone 980px）。也就是document.documentElement.clientWidth visual viewport：代表浏览器可视区域的大小。也就是window.innerWidth ideal viewport：能完美适配移动设备的viewport，用户不需要缩放和横向滚动条就能完美看到网页内容，并且文字图片，在不同分辨率屏幕下显示出来太小应该是差不多的（比如iPhone的ideal viewport宽度是320px） 关于各个设备的ideal viewport 可以从这里查询，链接地址：http://viewportsizes.com/ 所以我们利用meta标签，设置viewport的宽度等于设备的宽度,并且不允许用户手动缩放。让viewport的宽度等于设备的宽度，这个应该就是我们想要的理想宽度。 实际上，只设置initial-scale=1，我们也能把当前的viewport宽度变成ideal viewport的宽度（这里不考虑iphone下不同dpr的缩放），因为这个缩放就是相对于ideal viewport来进行缩放的。当同时设置了width与initial-scale=1，浏览器会选择两者中较大的那个值。 说了这么多，那么我的问题出在哪儿呢？猜想是不是该安卓版本对设置width和initial-scale会有一些意想不到的问题，于是我去掉了width=device-width，保留initial-scale=1等属性，结果emoji竟然好了。 所以我遇到的情况就是，同时设置了width=device-width和initial-scale=1，会造成某些厂商手机的安卓5.0（目前只遇到这个）emoji被拉伸，去掉width=device-width，（不写width=device-width也就是windows phone上的IE无论是横竖屏都把宽度设为竖屏时ideal viewport宽度，个人觉得这个无伤大雅），至于为什么会这样，我暂时只能深入到这啦 (╥╯^╰╥) 结论每一个emoji，就是一个Unicode字符，由统一码联盟（The Unicode Consortium）来投票选拔和公布，世界各地的人们可以向联盟提交 emoji 提案。而统一码联盟的 emoji 规范，只是定义了某个字符的语义，再由 Emojipedia 这个网站对 emoji 进行描述表达，最后允许大家按照对描述的理解，自由地去设计图案。 所以不同的厂商以及不同的系统，甚至浏览器、浏览器版本以及系统字体等，对emoji的支持程度与兼容性是不一样的。比如同一个emoji笑脸表情，在ios和安卓上显示的效果也不一样。为了统一emoji表情，很多公司都有自己的一套emoji mapping，来做Unicode码与emoji表情的映射。 碎碎念移动端开发总会遇到各种问题，有时候做兼容也会遇到无法完全兼容两头的情况，这时只能放弃受众更小，选择兼容影响面、严重性更大的方案了。在解决问题的有时候深究下去，也会收获很多。","categories":[],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://unknownfor.github.io/tags/移动开发/"},{"name":"emoji","slug":"emoji","permalink":"http://unknownfor.github.io/tags/emoji/"}]},{"title":"Element日期选择组件时间选择限定","slug":"Element日期选择组件时间选择限定","date":"2017-07-18T07:50:38.000Z","updated":"2019-12-11T08:10:58.184Z","comments":true,"path":"2017/07/18/Element日期选择组件时间选择限定/","link":"","permalink":"http://unknownfor.github.io/2017/07/18/Element日期选择组件时间选择限定/","excerpt":"","text":"2018年4月更新：做企业合同办理入住遇到新的需求，特此记录一下。 12345678910111213141516171819202122import moment from 'moment'export default function () &#123; let that = this return &#123; /** * * 不允许选择未来日期 * 允许选择合同开始前的30天,（即往前推29天） * 如果合同租期已结束，可选最大时间为租期结束时间 */ pickerOptions: &#123; disabledDate(time) &#123; let curDate = (new Date()).getTime() let start = new Date(that.form.rent_start).getTime() let end = new Date(that.form.rent_end).getTime() let three = 30 * 24 * 3600 * 1000 if (moment().isAfter(that.form.rent_end, 'day')) &#123; return time.getTime() &lt; start - three || time.getTime() &gt; end &#125; return time.getTime() &lt; start - three || time.getTime() &gt; curDate &#125; &#125; &#125; 应用场景：双栏日期选择。选定开始日期后，结束日期只能限定在开始日期后三个月内的任意一天。 缺点:内部循环遍历所有日期，性能较差 代码： datepick.html 123&lt;div id=\"datepick\"&gt; &lt;datepick&gt;&lt;/datepick&gt;&lt;/div&gt; datepick.vue 1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div class=\"block\"&gt; &lt;el-date-picker v-model=\"value1\" type=\"date\" placeholder=\"开始日期\" :picker-options=\"pickerOptions0\"&gt; &lt;/el-date-picker&gt; &lt;el-date-picker v-model=\"value2\" type=\"date\" placeholder=\"结束日期\" :picker-options=\"pickerOptions1\"&gt; &lt;/el-date-picker&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data()&#123; return &#123; value1:'', value2:'', pickerOptions1: &#123; //disabledDate是日期组件的一个方法 disabledDate: (time) =&gt; &#123; //这里就涉及到日期的指定了 setMonth()函数可以设置月份 let currentTime = this.value1; let threeMonths = currentTime.setMonth(currentTime.getMonth()+3); //一开始我没加下面减三个月的那个语句，他的值会一直累加 currentTime.setMonth(currentTime.getMonth()-3) return time.getTime() &lt; this.value1 || time.getTime() &gt; threeMonths ; &#125; &#125; &#125; &#125; &#125; &lt;/script&gt; datepick.js 123456789101112import Vue from 'vue';import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';import datepick from '../components/datepick.vue';Vue.use(ElementUI);new Vue(&#123; el: \"#datepick\", template:'&lt;datepick/&gt;', components: &#123;datepick&#125;&#125;)","categories":[],"tags":[{"name":"Element","slug":"Element","permalink":"http://unknownfor.github.io/tags/Element/"}]},{"title":"Vue中样式覆盖-style的scoped属性","slug":"Vue中样式覆盖-style的scoped属性","date":"2017-07-06T07:01:37.000Z","updated":"2019-12-11T08:05:07.866Z","comments":true,"path":"2017/07/06/Vue中样式覆盖-style的scoped属性/","link":"","permalink":"http://unknownfor.github.io/2017/07/06/Vue中样式覆盖-style的scoped属性/","excerpt":"","text":"背景 &emsp;项目使用Vue和ElementUi，想要覆盖ElementUi默认的输入框样式，新增自定义CSS样式，根据el-input编译后生成的class修改，但是样式并不生效。 后来发现修改1&lt;style type=\"text/css\" scoped&gt;&lt;/style&gt; 标签里的scoped删除就生效了。 原因 &emsp;scope可以做到样式私有化，及当前样式只作用于当前模块，不会影响全局。 &emsp;通过查看DOM结构发现：vue通过在DOM结构以及css样式上加唯一不重复的标记，以保证唯一，达到样式私有化模块化的目的。具体的渲染结果是怎样的，通过一个例子来说明。 举个栗子 &emsp;一个公共组件button，为了样式模块化，给其加上scoped属性 1234567891011121314151617//button.vue&lt;template&gt; &lt;div class=\"button-warp\"&gt; &lt;button class=\"button\"&gt;text&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;...&lt;style scoped&gt; .button-warp&#123; display:inline-block; &#125; .button&#123; padding: 5px 10px; font-size: 12px; border-radus: 2px; &#125;&lt;/style&gt; &emsp;浏览器渲染的button组件，其html和css结构如下： 123&lt;div data-v-2311c06a class=\"button-warp\"&gt; &lt;button data-v-2311c06a class=\"button\"&gt;text&lt;/button&gt;&lt;/div&gt; 12345678.button-warp[data-v-2311c06a]&#123; display:inline-block;&#125;.button[data-v-2311c06a]&#123; padding: 5px 10px; font-size: 12px; border-radus: 2px;&#125; &emsp;从上面的案例可以看出，添加了scoped属性的组件，为了达到组件样式模块化，做了两个处理： 给 HTML的 DOM节点加一个不重复data属性(形如：data-v-2311c06a)来表示他的唯一性 在每句 css选择器的末尾（编译后的生成的css语句）加一个当前组件的data属性选择器（如[data-v-2311c06a]）来私有化样式 &emsp;但这势必影响到css的优先级，scoped虽然达到了组件样式模块化，但是会导致每个样式的权重加重。理论上我们要修改这个样式的话，需要更高的权重去修改，增加了复杂度。 外部引用&emsp;栗子说明了单个组件渲染，当遇到组件相互调用，如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性。 解决方案&emsp;vue-loader的深度作用选择器。 &emsp;在vue.js中，&lt;style scoped&gt;的作用域在本html页面，&lt;style&gt;样式的作用域则是全局（即所有html页面），由于我把其中一个html页面的&lt;style scoped&gt;scoped去掉，这个页面的样式就变成了全局样式，当其它页面和这些全局样式重class名时，样式会被覆盖（vue默认全局样式覆盖局部样式），这样就导致当前页面定义样式影响到全局样式。 &emsp;如何在&lt;style scoped&gt;局部样式中覆盖全局样式：父组件cssName+ /deep/+第三方库需要更改的cssName 123比如修改class为el-input__inner的元素，它的父class为input_percent，则在style中写入input_percent /deep/ .el-input__inner &#123;&#125;即可","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://unknownfor.github.io/tags/Vue/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2017-03-08T16:04:37.000Z","updated":"2019-12-11T08:05:16.131Z","comments":true,"path":"2017/03/09/markdown语法/","link":"","permalink":"http://unknownfor.github.io/2017/03/09/markdown语法/","excerpt":"","text":"强调 分割线 引用 嵌套列表 段落缩进（空格） 字体、字号、颜色 标签 当前目录使用的索引超链的方式 强调1234567**强调文字**__强调文字__*强调文字强调文字*_强调文字_ 强调文字强调文字 强调文字强调文字 强调文字 分割线12--- 引用12&gt;引用 &gt;&gt;引用中的引用 引用 引用中的引用 嵌套列表123456- 嵌套列表1 + 嵌套列表2 + 嵌套列表3 - 嵌套列表4 * 嵌套列表5- 嵌套列表6 嵌套列表1 嵌套列表2 嵌套列表3 嵌套列表4 嵌套列表5 嵌套列表6 段落缩进1234半方大的空白&amp;ensp;或&amp;#8194;看，飞碟全方大的空白&amp;emsp;或&amp;#8195;看，飞碟不断行的空白格&amp;nbsp;或&amp;#160;看，飞碟&amp;emsp;&amp;emsp;段落从此开始。 半方大的空白&ensp;或&#8194;看，飞碟 全方大的空白&emsp;或&#8195;看，飞碟 不断行的空白格&nbsp;或&#160;看，飞碟 &emsp;&emsp;段落从此开始。 字体、字号、颜色123456&lt;font face=\"黑体\"&gt;我是黑体字&lt;/font&gt;&lt;font face=\"微软雅黑\"&gt;我是微软雅黑&lt;/font&gt;&lt;font face=\"STCAIYUN\"&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=12 face=\"黑体\"&gt;黑体&lt;/font&gt;&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;&lt;font color=gray size=5&gt;gray&lt;/font&gt; 我是黑体字 我是微软雅黑 我是华文彩云 黑体 null gray 标签1行内标签` 这是一个有颜色的标签","categories":[],"tags":[]}]}