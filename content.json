{"meta":{"title":"Cholesterol","subtitle":"你的经历终成谈吐","description":"你的经历终成谈吐","author":"胆固醇","url":"http://unknownfor.github.io","root":"/"},"pages":[{"title":"欢迎来到这里。","date":"2017-03-23T06:24:06.000Z","updated":"2019-12-12T09:37:27.890Z","comments":true,"path":"about/index.html","permalink":"http://unknownfor.github.io/about/index.html","excerpt":"","text":"# 关于博客博客建立于 1490198400(UNIX)，由 Hexo 强力驱动。 # 关于我重度可乐爱好者，所以自命名cholesterol。 加班🐶一只，软件工程专业，喜欢侦探小说和数学。 有两只猫 (´ཀ`」 ∠) 目前的职位是「前端 开发工程师」。 # 联系我如果你希望同我交流，可以发送邮件 （cholesterol54@gmail.com）给我。 偶尔会在 github 上冒泡，fork最近的新的前端代码。"},{"title":"archive","date":"2016-03-23T06:24:06.000Z","updated":"2019-05-23T07:23:38.000Z","comments":true,"path":"archives/index.html","permalink":"http://unknownfor.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-03-23T06:24:06.000Z","updated":"2019-05-23T06:28:42.000Z","comments":true,"path":"categories/index.html","permalink":"http://unknownfor.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"学习单元测试 - Jest","slug":"学习单元测试 - Jest","date":"2018-05-04T09:07:56.000Z","updated":"2019-12-12T09:33:15.389Z","comments":true,"path":"2018/05/04/学习单元测试 - Jest/","link":"","permalink":"http://unknownfor.github.io/2018/05/04/学习单元测试 - Jest/","excerpt":"","text":"现在系统功能趋于稳定，想着接入单元测试使用一下。尝试着为公共组件和公共方法编写覆盖全面的单元测试。 Jestvue-cli 自带Jest,开箱即用。在根目录中创建一个名为 jest.config.js 的配置文件。配置文档 1234567891011121314151617181920212223242526module.exports = &#123; // 文件后缀 moduleFileExtensions: ['js', 'jsx', 'json', 'vue'], // 文件如何转换 transform: &#123; '^.+\\\\.vue$': 'vue-jest', '.+\\\\.(css|styl|less|sass|scss|svg|png|jpg|ttf|woff|woff2)$': 'jest-transform-stub', '^.+\\\\.jsx?$': 'babel-jest' &#125;, // 忽略的文件 transformIgnorePatterns: ['/node_modules/'], // 生成快照需要的插件 snapshotSerializers: ['jest-serializer-vue'], // 需要执行哪些目录下的测试用例 testMatch: [ '**/tests/unit/**/*.spec.(js|jsx|ts|tsx)|**/__tests__/*.(js|jsx|ts|tsx)' ], // 在执行用例前的配置文件 setupFiles: ['./tests/setup.js'], // 测试覆盖率配置 collectCoverage: true, coverageReporters: ['html', 'lcov', 'text-summary'], coverageDirectory: './test/coverage', collectCoverageFrom: ['components/**/*.vue']&#125; 安装1vue add unit-jest 语法断言、异步代码测试、Mock 函数、快照参考文档 异步获取数据肯定是一个常见场景了。异步代码通常会有两种写法，分别为： 回调函数 函数返回 promise 在测试异步代码的时候，通常返回的数据是不确定的，因此我们只需要测试异步代码是否正常返回数据即可。 1234567891011121314// 回调函数的写法，通过 done 来让测试代码一直等待test('fetch success', done =&gt; &#123; fetch(data =&gt; &#123; expect(data.success).toBe(true) done() &#125;)&#125;)// 函数返回 promise 的写法，注意要加上 return// 当然对于返回 promise 的函数我们也可以直接使用 awaittest('fetch success', () =&gt; &#123; return fetch().then(data =&gt; &#123; expect(data.success).toBe(true) &#125;)&#125;) 实践单元测试case部署在tests/unit文件夹中，使用Jest编写。可以测试引入的公共方法，也可以测试一个单文件组件。建议按照代码组织结构来编写对应的单元测试case。 使用npm run unit来运行单元测试，测试结果会在命令行中显示。在构建测试环境的时候会自动运行单元测试，如果单元测试存在未通过的case，则构建会失败并终止。构建beta环境和生产环境暂时不会运行单元测试。 一个简单的关于为数字加入千位分隔符的方法的单元测试： 123456789describe('Utils suits', function () &#123; it('should add commas for numbers', function () &#123; let fn = Utils.addNumberCommas expect(fn(123)).toBe('123') expect(fn(12345)).toBe('12,345') expect(fn(1234567.89)).toBe('1,234,567.89') expect(fn(-1234567.89)).toBe('-1,234,567.89') &#125;)&#125;) 输出示例： 参考链接： Jest Vue单元测试 Vue_Test_Utils","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://unknownfor.github.io/tags/学习/"},{"name":"前端","slug":"前端","permalink":"http://unknownfor.github.io/tags/前端/"},{"name":"单元测试","slug":"单元测试","permalink":"http://unknownfor.github.io/tags/单元测试/"}]},{"title":"请求封装","slug":"请求与封装","date":"2018-03-29T13:32:01.000Z","updated":"2019-12-11T09:38:41.530Z","comments":true,"path":"2018/03/29/请求与封装/","link":"","permalink":"http://unknownfor.github.io/2018/03/29/请求与封装/","excerpt":"","text":"目前后台是微服务架构，所以不同的业务模块会请求到不同的地址，而不同的环境（测试/beta/生产）会携带不同的请求头进行区分，同时每个请求都有固定的参数携带，所以需要对请求进行统一的封装和管理。在这里记录一下封装请求的代码。 目前请求统一封装至 services 文件夹，按照后台模块名进行区分。每个请求都会封装成一个Promise，使用async/await进行异步请求管理。注意同时发起的多个请求使用Promise.all封装为一个新的Promise进行管理，防止串行请求影响性能。 12345let resp = await OpService.getProjects()console.log(resp)let requests = [UcService.getCurrentDeptLoginInfo(), UcService.getDepts()]let [currentDeptResp, deptsResp] = await Promise.all(requests) 1 utils/request.js 封装请求 1234567891011121314151617181920212223//module区分模块，模块名称封装在 【src/config/module.js】里//path 是请求的文件路径//data 是传入数据//noAccessToken 大部分时间都是false ，极端情况 比如登陆、投诉之类的不需要 get(module, path, data, noAccessToken = false) &#123; let p = new Promise(async function (resolve, reject) &#123; try &#123; let config = await BaseService.getConfig() let client = await BaseService.getClient(module) let services = config.services[module] let resp = await client.get(makeUrl(services.host, path, data, noAccessToken), &#123; headers: &#123; accept: 'application/json', &#125; &#125;) resolve(resp) &#125; catch (e) &#123; await handleError(e) reject(e) &#125; &#125;) return p &#125;, 2 eg: src\\services.js 封装请求 123456789101112131415161718/** * 登录后获取当前基础信息接口 */ //R是在build/webpack.base.conf.js里声明过的封装方法 //里面包含了基础的请求信息 function getCurrentDeptLoginInfo() &#123; let p = new Promise(async function (res, rej) &#123; try &#123; let resp = await R.get(Config.module.UC, '/user/get_current_dept_login_info') res(resp) &#125; catch (e) &#123; rej(e) &#125; &#125;) return p&#125; 3 应用请求 src\\app.js 调用封装的方法 123456789101112131415161718async handleDeptCommand(id) &#123; Loading.show() try &#123; let resp = await UserService.switchDept(id) if (resp.errcode == 0) &#123; let resp2 = await UserService.getCurrentDeptLoginInfo() BaseService.setBasicData(resp2.info) this._renderBasicData(resp2.info) this.$router.push('/') &#125; else &#123; console.error(new Error('errcode: ' + resp.errcode)) &#125; &#125; catch (e) &#123; console.error(e) &#125; finally &#123; Loading.hide() &#125; &#125;","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://unknownfor.github.io/tags/前端/"},{"name":"VUE","slug":"VUE","permalink":"http://unknownfor.github.io/tags/VUE/"}]},{"title":"前端页面内权限控制规范","slug":"前端页面内权限控制规范","date":"2018-03-13T11:46:04.000Z","updated":"2019-12-11T09:04:00.317Z","comments":true,"path":"2018/03/13/前端页面内权限控制规范/","link":"","permalink":"http://unknownfor.github.io/2018/03/13/前端页面内权限控制规范/","excerpt":"","text":"201809更新v-auth控制弹窗内元素渲染会出现首次渲染成功后，第二次打开弹窗为false的情况，导致权限判断失败，页面样式错位，所以无法在弹窗内使用该方法。 解决方法：因为只需要页面初次加载时判断用户有无功能权限，通过接口查询一次后赋值给data的xx属性，通过属性的值来判断。 12345678910111213async created() &#123; // do someting // 查询有无删除调账记录权限 try &#123; let valid = await this.fCheckAuth('household.HOUSEHOLD_DELSUBJECT') if (valid) &#123; this.show_del = true &#125; &#125; catch (e) &#123; console.log(e) &#125;&#125;, 前端页面内权限控制规范目前的权限系统支持到动作点的细粒度控制，前端支持前置判断权限从而控制节点的展示与隐藏，执行相关逻辑等。前端通过 mixin 混入权限控制模块进行判断和处理。 自定义组件需要单独import &#39;@/mixin/auth&#39;，如果是已经引入了@/mixin的页面组件则不需要额外引入该模块。 该模块提供一个自定义指令v-auth和一个公共方法fCheckAuth，前者用来根据权限控制一个节点的展示或隐藏，后者通过该方法查询当前角色是否有某权限。 动作点管理动作点统一添加到@/config/auth。动作点通过模块管理，值为后台刷新的动作点名。 123456export default &#123; // 账单 bill: &#123; CONFIRM_OFFLINE_PAYMENT: 'accounting_billcenter_confirmofflinepayment' // 确认财务收款 &#125;&#125; v-authv-auth接收多种格式的参数。 传入字符串可以传入一个形如&#39;bill.CONFIRM_OFFLINE_PAYMENT&#39;的字符串，指令会到配置中寻找对应的路径查询当前动作点是否有权限，如果没有权限，则移除这个 DOM。 注意：传入的是字符串&#39;bill.CONFIRM_OFFLINE_PAYMENT&#39;，而不是bill.CONFIRM_OFFLINE_PAYMENT，后者会被框架当做组件的data值去获取。 传入对象可以传入的是一个对象： 参数名 类型 解释 auth String 逻辑处理同字符串参数 hide Boolean 如果为true，则将其display属性置为none（而不是从 dom 中移除这个节点） reverse Boolean 如果为true，则展示逻辑与正常相反，即无权限时展示该节点，有权限时移除这个节点 传入布尔值如果传入的是一个布尔值且该布尔值为false，则移除这个 DOM。作用同v-if。 fCheckAuth()方法使用this.fCheckAuth(auth)方法判断当前是否有auth权限，auth参数同v-auth自定义指令接收的字符串参数。 注意，这是一个异步方法。使用 1234let valid = await this.fCheckAuth('bill.CONFIRM_OFFLINE_PAYMENT')if (valid) &#123; // do something&#125; 或者 12345this.fCheckAuth('bill.CONFIRM_OFFLINE_PAYMENT').then(valid =&gt; &#123; if (valid) &#123; // do something &#125;&#125;) 判断是否具有相关权限。","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://unknownfor.github.io/tags/前端/"},{"name":"开发文档","slug":"开发文档","permalink":"http://unknownfor.github.io/tags/开发文档/"}]},{"title":"手动实现all、bind、apply","slug":"手动实现all、bind、apply","date":"2017-09-23T10:32:59.000Z","updated":"2019-12-12T08:47:08.540Z","comments":true,"path":"2017/09/23/手动实现all、bind、apply/","link":"","permalink":"http://unknownfor.github.io/2017/09/23/手动实现all、bind、apply/","excerpt":"","text":"call原生call 123456789function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;run.call(&#123; a: 'a', b: 'b'&#125;, 1, 2) 在实现的过程有个关键： 如果一个函数作为一个对象的属性，那么通过对象的.运算符调用此函数，this 就是此对象 1234567891011let obj = &#123; a: 'a', b: 'b', test: function (arg1, arg2) &#123; console.log(arg1, arg2) // this.a 就是 a; this.b 就是 b console.log(this.a, this.b) &#125;&#125;obj.test(1, 2) 手动模拟call123456789101112131415161718192021222324252627282930Function.prototype.call2 = function(context) &#123; if(typeof this !== 'function') &#123; throw new TypeError('Error') &#125; // 默认上下文是window context = context || window // 保存默认的fn const &#123; fn &#125; = context // 前面讲的关键，将函数本身作为对象context的属性调用，自动绑定this context.fn = this const args = [...arguments].slice(1) const result = context.fn(...args) // 恢复默认的fn context.fn = fn return result&#125;// 以下是测试代码function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;test.call2(&#123; a: 'a', b: 'b'&#125;, 1, 2) bindbind有两个特点： 本身返回一个全新的函数，所以需要考虑new的清空 可以保留参数，内部实现了参数的拼接 123456789101112131415161718192021222324252627282930313233343536Function.prototype.bind2 = function(context) &#123; if(typeof this !== 'function') &#123; throw new TypeError('Error') &#125; const that = this // 保留之前的参数，为了下面的参数拼接 const args = [...arguments].slice(1) return function F() &#123; // 如果被new创建实例，不会被改变上下文！ if(this instanceof F) &#123; return new that(...args, ...arguments) &#125; // args.concat(...arguments): 拼接之前和现在的参数 // 注意：arguments是个类Array的Object, 用解构运算符..., 直接拿值拼接 return that.apply(context, args.concat(...arguments)) &#125;&#125;/** * 以下是测试代码 */function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;const test2 = test.bind2(&#123; a: 'a', b: 'b'&#125;, 1) // 参数 1test2(2) // 参数 2 applyapply和call实现类似，只是传入的参数形式是数组形式，而不是逗号分隔的参数序列。 因此，借助es6提供的…运算符，就可以很方便的实现数组和参数序列的转化。 12345678910111213141516171819202122232425262728293031323334Function.prototype.apply2 = function(context) &#123; if(typeof this !== 'function') &#123; throw new TypeError('Error') &#125; context = context || window const &#123; fn &#125; = context context.fn = this let result if(Array.isArray(arguments[1])) &#123; // 通过...运算符将数组转换为用逗号分隔的参数序列 result = context.fn(...arguments[1]) &#125; else &#123; result = context.fn() &#125; context.fn = fn return result&#125;/** * 以下是测试代码 */function test(arg1, arg2) &#123; console.log(arg1, arg2) console.log(this.a, this.b)&#125;test.apply2(&#123; a: 'a', b: 'b'&#125;, [1, 2])","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://unknownfor.github.io/tags/前端/"},{"name":"面试","slug":"面试","permalink":"http://unknownfor.github.io/tags/面试/"}]},{"title":"记录hexo替换主题","slug":"记录hexo替换主题","date":"2017-09-09T07:57:42.000Z","updated":"2019-12-11T09:06:52.962Z","comments":true,"path":"2017/09/09/记录hexo替换主题/","link":"","permalink":"http://unknownfor.github.io/2017/09/09/记录hexo替换主题/","excerpt":"","text":"博客也是上线了一年了，结果拖拖拉拉一直没什么东西写，今天闲来无事想着更换看腻了的博客主题。在 hexo主题官网 找到了一款极简的主题 polarbear ,安装替换现有主题都是常规流程。参考制作人的readme步骤。 12$ npm install hexo-renderer-scss --save$ git clone https://github.com/frostfan/hexo-theme-polarbear themes/polarbear 修改配置 _config.yml123456789101112# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: polarbear# 在归档页面显示所有文章 （Show all articles on archive page.）# 需要安装(Need to install) hexo-generator-archive 插件支持archive_generator: per_page: 0 yearly: false monthly: false daily: false 结果 archive 和 about 遇到了问题。右上角的归档页和关于我找不到路径。 更换自己喜欢的网页图标网上搜索自己喜欢的图片，尺寸小，注意格式要是.ico,替换本地themes文件夹下的favicon.icon文件即可。 解决about找不到排查了一下问题，可能是文件找不到。终于找到了相关教程，new了文件 12hexo new page \"about\"hexo new page \"archives\" 执行命令后在本地站点的source目录下生成一个about文件夹，修改about文件夹下的index.md。相应的archives也要修改type 12345---title: aboutdate: 2016-03-23 14:24:06type: about--- 12345---title: archivesdate: 2016-03-23 14:24:06type: archive--- 重启服务就发现about可以正常跳转一个空页了。 解决archive找不到百思不得其解为什么hexo没有自动生成archive，明明是安装了插件就可以支持的。重新执行了一下安装命令。1npm install --save hexo-generator-archive 在node_modules下找到了相应的hexo-generator-archive，证明插件安装成功。但是还是没有自动生成。 终于排查到了问题，_config.yml 网站配置文件里的文件目录写错了 1234# 错误archive_dir: archive# 正确archive_dir: archives 终于成功了！ 以下是9月10日更新：侧边栏没有展示自定义的widget 修改本地站点的 _config.yml 的相关配置语句并没有生效，经过排查发现是主题的 _config.yml 的相关配置是false，看来主题的配置权重更高。修改为false之后就发现了自定义的 widget_custom 出现了。 参考文章 官方说明 Hexo安装配置详解","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://unknownfor.github.io/tags/hexo/"}]},{"title":"emoji的坑","slug":"emoji的坑","date":"2017-08-22T10:10:23.000Z","updated":"2019-12-11T08:14:08.950Z","comments":true,"path":"2017/08/22/emoji的坑/","link":"","permalink":"http://unknownfor.github.io/2017/08/22/emoji的坑/","excerpt":"","text":"1从毕业以来，基本就一直在做移动端，但是一直就关于移动端的开发，各种适配问题的解决，在日常搬砖中处理了就过了，也没有把东西都沉淀下来，现就一个小bug，记录一下。 背景之前在做一个留言功能时，发现在其中一台安卓5.0的手机上，输入emoji糊掉了，成了如下这样的情况 这是skr啥玩意儿呀。 与是我又试了好几个手机，ios都没有问题，甚至一台安卓机中之霸（安卓4.0），随便进个页面都要加载十几秒的手机都没有问题，是乱码了吗？ 为啥emoji会出现乱码呢？相信很多人都遇到过关于emoji的问题，比如输入emoji，传给后端，再经过一系列操作后从接口中取到后端返回的emoji字符就乱了。又比如为了限制输入字数，给字符做截断时出现的问题。 初步怀疑是编码问题，那我们就来看看emoji究竟是何方神圣。 emoji的历史emoji对于我们来说并不陌生，我们很早就开始接触它了。emoji这个词来源于日语里的“絵文字”（假名为“えもじ”，读音即emoji）。它是1999年，当时还在日本无线运营商NTT DoCoMo工作的Shigetaka Kurita（栗田穣崇）发明的。 emoji的编码emoji虽然看上去是一个有颜色有形状的表情，但它属于计算机中的字符。在计算机中，我们把文字、标点符号、图形符号、数字等统一称为字符，由字符组成的集合，我们称为字符集。为了让计算机识别字符集里的字符，我们设计了一套字符集编码规则，比如ASCII码，由于ASCII只规定了128个字符的编码，随着计算机的发展，人们意识到这些编码显然是不够的，为了统一世界上的所有字符，诞生出了Unicode字符集，而emoji字符就是Unicode字符集中的一部分。 UnicodeUnicode从0开始，为每个符号指定一个编号，称做”码点”，如U+0000，U+表示紧跟在后面的十六进制数是Unicode的码点。Unicode只规定了每个字符的码点，到底用什么样的字节序表示这个码点，就涉及到编码方法，比如我们html上常用的UTF-8。关于不同的编码方法怎么表示Unicode，以及JavaScript是怎么处理Unicode，这里就不详细阐述了，可参考Unicode与JavaScript详解 链接地址：http://www.ruanyifeng.com/blog/2014/12/unicode.html 所以emoji作为unicode，那在计算机上是怎么显示的？ 之前我在一微信群里@我一朋友，结果出现了下面的情况。 @符号跑右边去了，当时觉得很奇怪，后来了解到，这是阿拉伯文，因为阿拉伯文的书写规则是从右向左，所以@符号跑到右边去了，可见微信对不同unicode字符排版做的兼容还挺好。再比如这几个字符，热҈得҈字҈出҈汗҈了҈。 这就涉及到了复杂文字编排（Complex text layout，缩写：CTL）。要求复杂文字编排以适当显示的书写系统称为复杂文本，比如阿拉伯文字、婆罗米系文字的天城文、泰文等。 拿泰文来说，根据拼写规则，泰文可形象地分为鞋子字符、主体字符、帽子字符、声调字符等。泰文的每个基本字符对应一个unicode码，人们在输入多个基本字符时，新输入的字符与之前的字符做匹配，如果可以组合，则这时前面的输入就拼合成了一个泰文字符然后显示出来。 萨瓦迪卡～ 英文也是，我们在输入英文时会习惯以空格来拆分前后单词,你如果输入一串连续的英文字母，计算机在识别上也会有困难。phpisthebestlanguageintheworld（手动滑稽脸）这句话就很有争议！！ 人为可以轻松识别一个泰文是否拼写正确，但是计算机在显示时就很难判断。 像泰文这种特殊合成字符的本质，你无法避免人们在计算机上都会有哪些奇妙的创造。 于是乎，不同字符之间的组合，就诞生出了流行的颜文字： ฅ՞•ﻌ•՞ฅ ʕ•̼͛͡•ʕ-̺͛͡•ʔ•̮͛͡•ʔ (⑉꒦ິ^꒦ິ⑉) ₊˚‧(๑σ̴̶̷̥́ ₃σ̴̶̷̀)·˚₊ ୧(๑•̀⌄•́๑)૭✧ 而字符的显示，还有一个影响就是字体，在浏览器中，如果对应的编码在字体文件中为空，一般会展示成□□□□，这样至少不会影响排版，但是unicode作为万国码实在太庞大了，在一些字体里，对一些特殊字符还是会产生一些错误的排版，唉҈～真҈是惆҈怅～～ 对于emoji来说，它虽然也是一种特殊字符，但它并不属于复杂文本，并且我是通过移动终端规范输入，排版也不会有什么问题。我设置的font-family在其他手机上是好的也说明，这些字体对输入的emoji也是支持的，出问题的终端上，非emoji的字体正常显示，那暂时可以排除字体对emoji的影响了。 回归问题到这里，还没有解决我的问题。本来以为是常见问题，比如数据提交时或者数据库储存的编码问题。可是，我也没传给后端啊！我刚在自己的页面上输入显示就成这样了！ 可恶，这个锅甩不动了。还是得自己解决，我input框刚输入，本地看到就乱了，看来还是自己的问题。 我一气之下疯狂乱点，发现不同的表情对应的这些小虫长得还不一样，于是，我决定把它放大看一看 这不就是表情么，只是因为某些原因看上去被压缩了。我的表情啊，你到底是经历了什么才变得如此面目全非。我一定要找到毁你容的真凶。 先分析一下表象，emoji的显示被截断、压缩。为什么被压缩？回归场景，移动端切图，那么移动端的多终端适配，可不可能是问题的原因？ 切图是UI给的以iphone6的屏幕宽度为准的750px2倍视觉稿，组内方案选择参考了手淘的flexible。具体原理和这次主题无关，我就不在这里阐述了。关于移动端多端适配方案的原理详细，可以参考 手淘H5页面的终端适配 链接地址: https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html 那么哪些代码是影响emoji缩放的代码呢？最先想到的是，我的emoji在输入框里面，设置了font-size，这个font-size的值是rem, 那会不会是某些安卓系统emoji对rem支持不好？于是我换成px，依然如此。 那么页面上还有哪儿还有会影响缩放呢？于是定位到了这里。 1&lt;meta name = \"viewport\" content=\"initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=0,width=device-width\"/&gt; viewport是我们设备屏幕上用来显示网页的区域，在移动端上，viewport一般都是大于浏览器可视区域。 理论上，移动端有三个viewport。 layout viewport：移动浏览器为了让所有网站正常显示（包括那些PC的页面），把默认的viewport设为了一个较宽值，这个值一般都是大于移动端可视区（比如iPhone 980px）。也就是document.documentElement.clientWidth visual viewport：代表浏览器可视区域的大小。也就是window.innerWidth ideal viewport：能完美适配移动设备的viewport，用户不需要缩放和横向滚动条就能完美看到网页内容，并且文字图片，在不同分辨率屏幕下显示出来太小应该是差不多的（比如iPhone的ideal viewport宽度是320px） 关于各个设备的ideal viewport 可以从这里查询，链接地址：http://viewportsizes.com/ 所以我们利用meta标签，设置viewport的宽度等于设备的宽度,并且不允许用户手动缩放。让viewport的宽度等于设备的宽度，这个应该就是我们想要的理想宽度。 实际上，只设置initial-scale=1，我们也能把当前的viewport宽度变成ideal viewport的宽度（这里不考虑iphone下不同dpr的缩放），因为这个缩放就是相对于ideal viewport来进行缩放的。当同时设置了width与initial-scale=1，浏览器会选择两者中较大的那个值。 说了这么多，那么我的问题出在哪儿呢？猜想是不是该安卓版本对设置width和initial-scale会有一些意想不到的问题，于是我去掉了width=device-width，保留initial-scale=1等属性，结果emoji竟然好了。 所以我遇到的情况就是，同时设置了width=device-width和initial-scale=1，会造成某些厂商手机的安卓5.0（目前只遇到这个）emoji被拉伸，去掉width=device-width，（不写width=device-width也就是windows phone上的IE无论是横竖屏都把宽度设为竖屏时ideal viewport宽度，个人觉得这个无伤大雅），至于为什么会这样，我暂时只能深入到这啦 (╥╯^╰╥) 结论每一个emoji，就是一个Unicode字符，由统一码联盟（The Unicode Consortium）来投票选拔和公布，世界各地的人们可以向联盟提交 emoji 提案。而统一码联盟的 emoji 规范，只是定义了某个字符的语义，再由 Emojipedia 这个网站对 emoji 进行描述表达，最后允许大家按照对描述的理解，自由地去设计图案。 所以不同的厂商以及不同的系统，甚至浏览器、浏览器版本以及系统字体等，对emoji的支持程度与兼容性是不一样的。比如同一个emoji笑脸表情，在ios和安卓上显示的效果也不一样。为了统一emoji表情，很多公司都有自己的一套emoji mapping，来做Unicode码与emoji表情的映射。 碎碎念移动端开发总会遇到各种问题，有时候做兼容也会遇到无法完全兼容两头的情况，这时只能放弃受众更小，选择兼容影响面、严重性更大的方案了。在解决问题的有时候深究下去，也会收获很多。","categories":[],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://unknownfor.github.io/tags/移动开发/"},{"name":"emoji","slug":"emoji","permalink":"http://unknownfor.github.io/tags/emoji/"}]},{"title":"Element日期选择组件时间选择限定","slug":"Element日期选择组件时间选择限定","date":"2017-07-18T07:50:38.000Z","updated":"2019-12-12T09:19:34.420Z","comments":true,"path":"2017/07/18/Element日期选择组件时间选择限定/","link":"","permalink":"http://unknownfor.github.io/2017/07/18/Element日期选择组件时间选择限定/","excerpt":"","text":"2018 年 12 月更新：要求禁用时间不能小于启用时间。问题： 启用时间是动态更新的，不同数据启用时间不同，导致禁用时间范围也不一样。在data初始赋值后不会再更新pickerOptions解决方法：watch 启用时间，每次更新启用时间都动态更新一次pickerOptions Template12345678910111213141516171819202122232425262728&lt;el-form-item label=\"启用月份\" prop=\"start_year_month\"&gt; &lt;el-date-picker v-model=\"form.start_year_month\" type=\"month\" format=\"yyyy 年 MM\" value-format=\"yyyyMM\" style=\"width: 100%\" placeholder=\"请选择启用月份\" :clearable=\"false\" :editable=\"false\" &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label=\"禁用月份\" prop=\"stop_year_month\" &gt; &lt;el-date-picker :picker-options=\"pickerOptions\" v-model=\"form.stop_year_month\" :clearable=\"false\" :editable=\"false\" type=\"month\" style=\"width: 100%\" format=\"yyyy 年 MM\" value-format=\"yyyyMM\" placeholder=\"请选择禁用月份\" &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; Script123456789101112131415161718192021data: &#123; pickerOptions: &#123;&#125;, form: &#123; start_year_month: '', stop_year_month: '' &#125;&#125;watch: &#123; // time.getTime是把选中的时间转化成自1970年1月1日 00:00:00 UTC到当前时间的毫秒数 // 当前启用日期为 ‘201912’ ，只包含日期，导致return范围不对，需要转换为‘2019-12’ ['form.start_year_month'](val) &#123; this.pickerOptions = Object.assign(&#123;&#125;, this.pickerOptions, &#123; // disabledDate 为true表示不可选,false表示可选 disabledDate: (time) =&gt; &#123; let str = val.slice(0, 4) + '-' + val.slice(4, 7) str = new Date(str).getTime() return time.getTime() &lt; str // 可选时间范围大于等于启用日期 &#125; &#125;)&#125; 实现效果 2018 年 7 月更新：产品觉得饿了么的时间范围选择器不方便，要求使用两个单独的时间选择器做时间范围筛选。 Template1234567891011121314151617&lt;el-date-picker v-model=\"startDate\" type=\"date\" placeholder=\"选择开始日期\" :picker-options=\"pickerOptionsStart\" @change=\"changeEnd\"&gt;&lt;/el-date-picker&gt;&lt;el-date-picker v-model=\"endDate\" type=\"date\" placeholder=\"选择结束日期\" :picker-options=\"pickerOptionsEnd\" @change=\"changeStart\"&gt;&lt;/el-date-picker&gt; Script123456789101112131415161718192021222324data() &#123; return &#123; pickerOptionsStart: &#123;&#125;, pickerOptionsEnd:&#123;&#125;, startDate: '', endDate: '', &#125;;methods:&#123; changeStart ()&#123; this.pickerOptionsStart = Object.assign(&#123;&#125;,this.pickerOptionsStart,&#123; disabledDate: (time) =&gt; &#123; return time.getTime() &gt; this.endDate &#125; &#125;) &#125;, changeEnd ()&#123; this.pickerOptionsEnd = Object.assign(&#123;&#125;,this.pickerOptionsEnd,&#123; disabledDate: (time) =&gt; &#123; return time.getTime() &lt; this.startDate &#125; &#125;) &#125; &#125; 2018 年 4 月更新：做企业合同办理入住遇到新的需求，特此记录一下。 12345678910111213141516171819202122import moment from 'moment'export default function () &#123; let that = this return &#123; /** * * 不允许选择未来日期 * 允许选择合同开始前的30天,（即往前推29天） * 如果合同租期已结束，可选最大时间为租期结束时间 */ pickerOptions: &#123; disabledDate(time) &#123; let curDate = (new Date()).getTime() let start = new Date(that.form.rent_start).getTime() let end = new Date(that.form.rent_end).getTime() let three = 30 * 24 * 3600 * 1000 if (moment().isAfter(that.form.rent_end, 'day')) &#123; return time.getTime() &lt; start - three || time.getTime() &gt; end &#125; return time.getTime() &lt; start - three || time.getTime() &gt; curDate &#125; &#125; &#125; 应用场景：双栏日期选择。选定开始日期后，结束日期只能限定在开始日期后三个月内的任意一天。 缺点:内部循环遍历所有日期，性能较差 代码： datepick.html 123&lt;div id=\"datepick\"&gt; &lt;datepick&gt;&lt;/datepick&gt;&lt;/div&gt; datepick.vue 1234567891011121314151617181920212223242526272829303132333435363738&lt;template&gt; &lt;div class=\"block\"&gt; &lt;el-date-picker v-model=\"value1\" type=\"date\" placeholder=\"开始日期\" :picker-options=\"pickerOptions0\"&gt; &lt;/el-date-picker&gt; &lt;el-date-picker v-model=\"value2\" type=\"date\" placeholder=\"结束日期\" :picker-options=\"pickerOptions1\"&gt; &lt;/el-date-picker&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data()&#123; return &#123; value1:'', value2:'', pickerOptions1: &#123; //disabledDate是日期组件的一个方法 disabledDate: (time) =&gt; &#123; //这里就涉及到日期的指定了 setMonth()函数可以设置月份 let currentTime = this.value1; let threeMonths = currentTime.setMonth(currentTime.getMonth()+3); //一开始我没加下面减三个月的那个语句，他的值会一直累加 currentTime.setMonth(currentTime.getMonth()-3) return time.getTime() &lt; this.value1 || time.getTime() &gt; threeMonths ; &#125; &#125; &#125; &#125; &#125; &lt;/script&gt; datepick.js 123456789101112import Vue from 'vue';import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';import datepick from '../components/datepick.vue';Vue.use(ElementUI);new Vue(&#123; el: \"#datepick\", template:'&lt;datepick/&gt;', components: &#123;datepick&#125;&#125;)","categories":[],"tags":[{"name":"Element","slug":"Element","permalink":"http://unknownfor.github.io/tags/Element/"}]},{"title":"元素水平垂直居中","slug":"元素水平垂直居中","date":"2017-07-09T07:27:42.000Z","updated":"2019-12-11T08:33:34.549Z","comments":true,"path":"2017/07/09/元素水平垂直居中/","link":"","permalink":"http://unknownfor.github.io/2017/07/09/元素水平垂直居中/","excerpt":"","text":"方法一：position加margin 方法二： diaplay:table-cell 方法三：position加 transform 方法四：flex;align-items: center;justify-content: center 方法五：display:flex;margin:auto 方法六：transfer -50% 方法七：兼容低版本浏览器，不固定宽高 示例图 1.position加margin父元素和子元素高宽都固定，使用绝对定位的方法居中1234567891011121314151617181920212223/**html**/&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;/**css**/.parent &#123; width: 200px; height: 200px; background: yellow; position: relative;&#125;.child &#123; width: 100px; height: 100px; background: green; margin: auto; position: absolute; left: 0; right: 0; top: 0; bottom: 0;&#125; 2.display:tabel-cell父元素必须为tabel-cell，子元素必须为display：inline-block 123456789101112131415161718192021&lt;!-- html --&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;/*css*/.parent &#123; width: 200px; height: 200px; background: yellow; display: table-cell; vertical-align: middle; text-align: center;&#125;.child&#123; display: inline-block; vertical-align: middle; width: 100px; height: 100px; background: green;&#125; 3.position加 transform不需要考虑父元素的高宽，可以做自适应，但是子元素的高宽必须限定 12345678910111213141516171819202122&lt;!-- html --&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt; /* css */.parentss &#123; position: relative; background: yellow; width: 200px; height: 200px;&#125;.child &#123; position: absolute; background: green; top:50%; left:50%; -webkit-transform:translate(-50%,-50%); transform:translate(-50%,-50%); width: 100px; height: 100px;&#125; 4.flex;alige-item:center;justify-content: center子元素和父元素都无需限定高宽，移动端兼容性良好 1234567891011121314151617181920&lt;!-- html --&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;/* css */.parent &#123; background: yellow; width: 200px; height: 200px; display: flex; align-items: center; justify-content: center;&#125;.child &#123; background: green; width: 100px; height: 100px;&#125; 5.display:flex;margin:auto兼容性没测试过，移动端适用 12345678910111213141516171819&lt;!-- html --&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;/* css */.parent &#123; background: yellow; width: 200px; height: 200px; display: flex; &#125;.child &#123; background: green; width: 100px; height: 100px; margin: auto;&#125; 6.tranfer -50%百分比来设置宽高 123456789101112//vertical center.vertical-center&#123; position absolute top 50% transform translate(0,-50%)&#125;.vertical-horizontal&#123; position absolute left 50% top 50% transform translate(-50%,-50%)&#125; 12345678910111213141516171819202122&lt;!-- html --&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;/* css */.parent &#123; &#125;.child &#123; position: absolute; top: 50%; left: 50%; width:50%; height:30%; padding:20px; text-align:center; background:#393; color:#fff; transform: translate(-50%, -50%);&#125; 7.高宽不定1234567891011121314151617181920212223242526272829303132&lt;!-- html --&gt;&lt;div class=\"table\"&gt; &lt;div class=\"tableCell\"&gt; &lt;div class=\"content\"&gt;不固定宽高，自适应&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; /*css*/.table &#123; height: 200px;/*高度值不能少*/ width: 200px;/*宽度值不能少*/ display: table; position: relative; float:left; background: yellow;&#125; .tableCell &#123; display: table-cell; vertical-align: middle; text-align: center; *position: absolute; padding: 10px; *top: 50%; *left: 50%;&#125;.content &#123; *position:relative; *top: -50%; *left: -50%; background: green;&#125;","categories":[],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"http://unknownfor.github.io/tags/移动开发/"}]},{"title":"Vue中样式覆盖-style的scoped属性","slug":"Vue中样式覆盖-style的scoped属性","date":"2017-07-06T07:01:37.000Z","updated":"2019-12-11T08:05:07.866Z","comments":true,"path":"2017/07/06/Vue中样式覆盖-style的scoped属性/","link":"","permalink":"http://unknownfor.github.io/2017/07/06/Vue中样式覆盖-style的scoped属性/","excerpt":"","text":"背景 &emsp;项目使用Vue和ElementUi，想要覆盖ElementUi默认的输入框样式，新增自定义CSS样式，根据el-input编译后生成的class修改，但是样式并不生效。 后来发现修改1&lt;style type=\"text/css\" scoped&gt;&lt;/style&gt; 标签里的scoped删除就生效了。 原因 &emsp;scope可以做到样式私有化，及当前样式只作用于当前模块，不会影响全局。 &emsp;通过查看DOM结构发现：vue通过在DOM结构以及css样式上加唯一不重复的标记，以保证唯一，达到样式私有化模块化的目的。具体的渲染结果是怎样的，通过一个例子来说明。 举个栗子 &emsp;一个公共组件button，为了样式模块化，给其加上scoped属性 1234567891011121314151617//button.vue&lt;template&gt; &lt;div class=\"button-warp\"&gt; &lt;button class=\"button\"&gt;text&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;...&lt;style scoped&gt; .button-warp&#123; display:inline-block; &#125; .button&#123; padding: 5px 10px; font-size: 12px; border-radus: 2px; &#125;&lt;/style&gt; &emsp;浏览器渲染的button组件，其html和css结构如下： 123&lt;div data-v-2311c06a class=\"button-warp\"&gt; &lt;button data-v-2311c06a class=\"button\"&gt;text&lt;/button&gt;&lt;/div&gt; 12345678.button-warp[data-v-2311c06a]&#123; display:inline-block;&#125;.button[data-v-2311c06a]&#123; padding: 5px 10px; font-size: 12px; border-radus: 2px;&#125; &emsp;从上面的案例可以看出，添加了scoped属性的组件，为了达到组件样式模块化，做了两个处理： 给 HTML的 DOM节点加一个不重复data属性(形如：data-v-2311c06a)来表示他的唯一性 在每句 css选择器的末尾（编译后的生成的css语句）加一个当前组件的data属性选择器（如[data-v-2311c06a]）来私有化样式 &emsp;但这势必影响到css的优先级，scoped虽然达到了组件样式模块化，但是会导致每个样式的权重加重。理论上我们要修改这个样式的话，需要更高的权重去修改，增加了复杂度。 外部引用&emsp;栗子说明了单个组件渲染，当遇到组件相互调用，如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性。 解决方案&emsp;vue-loader的深度作用选择器。 &emsp;在vue.js中，&lt;style scoped&gt;的作用域在本html页面，&lt;style&gt;样式的作用域则是全局（即所有html页面），由于我把其中一个html页面的&lt;style scoped&gt;scoped去掉，这个页面的样式就变成了全局样式，当其它页面和这些全局样式重class名时，样式会被覆盖（vue默认全局样式覆盖局部样式），这样就导致当前页面定义样式影响到全局样式。 &emsp;如何在&lt;style scoped&gt;局部样式中覆盖全局样式：父组件cssName+ /deep/+第三方库需要更改的cssName 123比如修改class为el-input__inner的元素，它的父class为input_percent，则在style中写入input_percent /deep/ .el-input__inner &#123;&#125;即可","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://unknownfor.github.io/tags/Vue/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2017-03-08T16:04:37.000Z","updated":"2019-12-11T09:02:34.260Z","comments":true,"path":"2017/03/09/markdown语法/","link":"","permalink":"http://unknownfor.github.io/2017/03/09/markdown语法/","excerpt":"","text":"强调 分割线 引用 嵌套列表 段落缩进（空格） 字体、字号、颜色 标签 当前目录使用的索引超链的方式 强调1234567**强调文字**__强调文字__*强调文字强调文字*_强调文字_ 强调文字强调文字 强调文字强调文字 强调文字 分割线12--- 引用12&gt;引用 &gt;&gt;引用中的引用 引用 引用中的引用 嵌套列表123456- 嵌套列表1 + 嵌套列表2 + 嵌套列表3 - 嵌套列表4 * 嵌套列表5- 嵌套列表6 嵌套列表1 嵌套列表2 嵌套列表3 嵌套列表4 嵌套列表5 嵌套列表6 段落缩进1234半方大的空白&amp;ensp;或&amp;#8194;看，飞碟全方大的空白&amp;emsp;或&amp;#8195;看，飞碟不断行的空白格&amp;nbsp;或&amp;#160;看，飞碟&amp;emsp;&amp;emsp;段落从此开始。 半方大的空白&ensp;或&#8194;看，飞碟 全方大的空白&emsp;或&#8195;看，飞碟 不断行的空白格&nbsp;或&#160;看，飞碟 &emsp;&emsp;段落从此开始。 字体、字号、颜色123456&lt;font face=\"黑体\"&gt;我是黑体字&lt;/font&gt;&lt;font face=\"微软雅黑\"&gt;我是微软雅黑&lt;/font&gt;&lt;font face=\"STCAIYUN\"&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=12 face=\"黑体\"&gt;黑体&lt;/font&gt;&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;&lt;font color=gray size=5&gt;gray&lt;/font&gt; 我是黑体字 我是微软雅黑 我是华文彩云 黑体 null gray 标签1行内标签` 这是一个有颜色的标签","categories":[],"tags":[{"name":"学习","slug":"学习","permalink":"http://unknownfor.github.io/tags/学习/"}]}]}